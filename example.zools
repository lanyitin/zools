//1. Field Format
//    using regular expression to specify format of primitive type, such as String, Number, Boolean, and Date
//    the syntax is¡G primitive <Name> = /<Regular Expression>/;

primitive Float = /\d+\.\d+/;
primitive UUID = /[a-zA-Z0-9\-]+/;
primitive Boolean = /(true|false|True|False)/;
primitive DateTime = /\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}/;
primitive Temperature = /\d+(\.\d+)?/;


//2. Data Structure
//   to describe schema of complex type(structure), we can use following syntax
//   struct <Name> {
//       <Property Name> : <Property Type>,
//       ...
//   }
//	 <Property Type> could be a primitive, struct, and list of type(denote by '[' <Type> ']').

struct LatLng {
	lat: Float,
	lng: Float
}

struct ParkingDCU {
	ParkingID: UUID,
	SenID: UUID, 
	ParkStatus: Boolean,
	RecordTime: DateTime,
	loc?: LatLng
}

//3. Rules
//	 In this section, we need to describe the expected schema of input data by writing rules,
//   following line is the syntax of a rule:
//       <rule name>: <Type> '(' <Binding Rule>, ... ')'
//	 1. Every zools file could have multiple rules, but should have exactly one rule named 'target'.
//	    the 'target' rule is an entry point of entire format validation and conversion, 
//   2. <Type> could be a primitive, struct, and list of type(denote by '[' <Type> ']').
//   3. <Binding Rule> is used in case of input data using different property name,
//      the syntax on <Binding Rule> is <Structure's Property Name> = <Input Data's Property Name>
//   4. In case of property is a complex type, we can put a '@'<rule name> after <Input Data's Property Name>
//        to denote the mapping rule of the property. 


location: LatLng(lat = x, lng = y)

target: [[ParkingDCU(ParkingID    = id,
                   SenID         = sensor,
                   ParkStatus    = slot_status,
                   RecordTime    = timestamp,
                   loc           = pos@location
)]]