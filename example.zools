//1. Field Format
//    以正規表達式來描述欄位的格式
//    語法為： primitive <Name> = /<Regular Expression>/;

primitive Float = /\d+\.\d+/;
primitive UUID = /[a-zA-Z0-9\-]+/;
primitive Boolean = /(true|false|True|False)/;
primitive DateTime = /\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}/;
primitive Temperature = /\d+(\.\d+)?/;


//2. Data Structure
//   以類似C的struct來描述不同的資料結構
//   語法為：
//   struct <Name> {
//       <Property Name> : <Property Type>,
//       ...
//   }
//   目前<Property Type>只能用Field Format裡定義，日後打算支援Data Structure

struct LatLng {
	lat: Float,
	lng: Float
}

struct ParkingDCU {
	ParkingID: UUID,
	SenID: UUID, 
	ParkStatus: Boolean,
	RecordTime: DateTime,
	loc: LatLng
}

//3. Rules
//   以類似Makefile的寫法來描述受測資料的格式，
//   名稱為target的goal是整個mapping rule的起始點，代表的是受測資料需符合這個target所描述的rule
//   語法1為：    target: <Type>
//   語法2為：    target: <Type>(<Binding Rules>)
//   <Type>目前可支援Primitive或是Data Structure
//   <Binding Rules>的語法為 ： <Data Structure 的 Property Name> = <受測資料的Property Name>


location: LatLng(lat = x, lng = y)

//   以下的rule是針對{"id":"a-b-c", "sensor":"b-c-d", "slot_status":true, "timestamp":"2017-07-12T23:19:00.000"}所撰寫
target: [ParkingDCU(ParkingID     = id,
                   SenID         = sensor,
                   ParkStatus    = slot_status,
                   RecordTime    = timestamp,
                   loc            = pos@location
)]